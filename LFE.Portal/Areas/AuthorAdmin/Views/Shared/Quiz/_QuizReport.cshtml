@using LFE.DataTokens

<script>
        //function deleteRow(e) {
        //    e.preventDefault();
        //    var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        //    //if (window.console) console.log(dataItem);
        //    if (dataItem.LearnerCount > 0) {
        //        alert("Course already purchased and can't be deleted");
        //        return;
        //    }

        //    window.deleteCourse(dataItem.CourseId, dataItem.Name);
        //}

        //function onCourseDeleted(response) {
        //    if (response.success) {
        //        $('#gridAuthorCourses').data("kendoGrid").dataSource.read();
        //    } else {
        //        alert(response.error);
        //    }
    //}

    function onQuizListBound(e) {

        //console.log(e);
        var grid = e.sender;
        var data = grid.dataSource.data();
        $.each(data, function (i, item) {

            $('tr[data-uid="' + item.uid + '"] ').find('.cmd-edit').on('click', function(ev) {
                ev.preventDefault();
                window.getNotifManagerInstance().notify(notifEvents.quiz.loadQuizContent, { action: window.QuizActions.EDIT_QUIZ, data:{id: item.QuizId} });
            });
            //if (item.LearnerCount > 0) {
            //    $('tr[data-uid="' + item.uid + '"] ').find('.k-grid-Delete').hide();
            //}
        });

    }
</script>

@(Html.Kendo().Grid<QuizListDTO>()
        .Name("QuizRep")
        .TableHtmlAttributes(new { @style = "background-color: #fff !important;background-image: none !important;" })
        .Columns(columns =>
        {
            columns.Bound(m => m.Title).ClientTemplate("<a href='#=emptyHref#' style='' title='click to edit quiz' class='list-cmd cmd-edit' >#=Title#</a>").Title("Title");
            columns.Bound(p => p.Status).Title("Status").Width(100);
            columns.Bound(p => p.AddOn).Title("Creation Date").Format("{0:d}").Width(120);
            columns.Bound(p => p.Taken).Title("Taken").Width(100);
            columns.Bound(p => p.Completed).Title("Completed").Width(100);
            columns.Bound(p => p.IsQuizValid).Title("Valid").Width(100);
            //columns.Bound(p => p.AvgScore).Title("Average Score").Width(100);
            columns.Bound(m => m.QuizId).ClientTemplate("<a href='#=emptyHref#' style='margin:3px 0 0' class='list-cmd cmd-edit' >Edit</a>").Title(" ").Width(50);
            //columns.Command(command => command.Custom("Delete").Click("deleteRow"));
            columns.Command(c => c.Destroy().HtmlAttributes(new { @class = "list-cmd" })).Width(50);
        })
        .Sortable()
        .Pageable(pager => pager.Enabled(false))
        .Filterable(f => f.Enabled(false))
        .Events(e => e.DataBound("onQuizListBound"))
        .Editable(e => e.DisplayDeleteConfirmation(true))
        .DataSource(dataSource => dataSource.Ajax()
                            .Model(model => model.Id(p => p.QuizId))
                            .Read(read => read.Action("GetQuizzes", "Quiz").Type(HttpVerbs.Get)).ServerOperation(false)
                            .Destroy(d => d.Action("DestroyQuiz", "Quiz"))
        )
)